package com.lonch.client.databases;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lonch.client.database.bean.LogEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "lonch_log_entity".
*/
public class LogEntityDao extends AbstractDao<LogEntity, Long> {

    public static final String TABLENAME = "lonch_log_entity";

    /**
     * Properties of entity LogEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Operation = new Property(1, String.class, "operation", false, "OPERATION");
        public final static Property StartTime = new Property(2, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(3, String.class, "endTime", false, "END_TIME");
        public final static Property FromType = new Property(4, String.class, "fromType", false, "FROM_TYPE");
        public final static Property Time = new Property(5, Long.class, "time", false, "TIME");
        public final static Property Json = new Property(6, String.class, "json", false, "JSON");
        public final static Property Args = new Property(7, String.class, "args", false, "ARGS");
    }


    public LogEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LogEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"lonch_log_entity\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"OPERATION\" TEXT," + // 1: operation
                "\"START_TIME\" TEXT," + // 2: startTime
                "\"END_TIME\" TEXT," + // 3: endTime
                "\"FROM_TYPE\" TEXT," + // 4: fromType
                "\"TIME\" INTEGER," + // 5: time
                "\"JSON\" TEXT," + // 6: json
                "\"ARGS\" TEXT);"); // 7: args
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"lonch_log_entity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LogEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String operation = entity.getOperation();
        if (operation != null) {
            stmt.bindString(2, operation);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(4, endTime);
        }
 
        String fromType = entity.getFromType();
        if (fromType != null) {
            stmt.bindString(5, fromType);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(7, json);
        }
 
        String args = entity.getArgs();
        if (args != null) {
            stmt.bindString(8, args);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LogEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String operation = entity.getOperation();
        if (operation != null) {
            stmt.bindString(2, operation);
        }
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(3, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(4, endTime);
        }
 
        String fromType = entity.getFromType();
        if (fromType != null) {
            stmt.bindString(5, fromType);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(6, time);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(7, json);
        }
 
        String args = entity.getArgs();
        if (args != null) {
            stmt.bindString(8, args);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LogEntity readEntity(Cursor cursor, int offset) {
        LogEntity entity = new LogEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // operation
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // startTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // endTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fromType
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // json
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // args
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LogEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOperation(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setStartTime(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEndTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFromType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setJson(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setArgs(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LogEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LogEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LogEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
