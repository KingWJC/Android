package com.lonch.client.databases;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lonch.client.database.bean.MsgPersonalEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "lonch_msgperson_entity".
*/
public class MsgPersonalEntityDao extends AbstractDao<MsgPersonalEntity, Long> {

    public static final String TABLENAME = "lonch_msgperson_entity";

    /**
     * Properties of entity MsgPersonalEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserID = new Property(1, String.class, "userID", false, "USER_ID");
        public final static Property MsgID = new Property(2, String.class, "msgID", false, "MSG_ID");
        public final static Property MsgType = new Property(3, String.class, "msgType", false, "MSG_TYPE");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
        public final static Property IsSelf = new Property(5, boolean.class, "isSelf", false, "IS_SELF");
        public final static Property NickName = new Property(6, String.class, "nickName", false, "NICK_NAME");
        public final static Property FaceUrl = new Property(7, String.class, "faceUrl", false, "FACE_URL");
        public final static Property TimMessage = new Property(8, long.class, "timMessage", false, "TIM_MESSAGE");
        public final static Property OwnerId = new Property(9, String.class, "ownerId", false, "OWNER_ID");
        public final static Property Json = new Property(10, String.class, "json", false, "JSON");
    }


    public MsgPersonalEntityDao(DaoConfig config) {
        super(config);
    }
    
    public MsgPersonalEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"lonch_msgperson_entity\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" TEXT," + // 1: userID
                "\"MSG_ID\" TEXT," + // 2: msgID
                "\"MSG_TYPE\" TEXT," + // 3: msgType
                "\"TEXT\" TEXT," + // 4: text
                "\"IS_SELF\" INTEGER NOT NULL ," + // 5: isSelf
                "\"NICK_NAME\" TEXT," + // 6: nickName
                "\"FACE_URL\" TEXT," + // 7: faceUrl
                "\"TIM_MESSAGE\" INTEGER NOT NULL ," + // 8: timMessage
                "\"OWNER_ID\" TEXT," + // 9: ownerId
                "\"JSON\" TEXT);"); // 10: json
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"lonch_msgperson_entity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MsgPersonalEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }
 
        String msgID = entity.getMsgID();
        if (msgID != null) {
            stmt.bindString(3, msgID);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(4, msgType);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
        stmt.bindLong(6, entity.getIsSelf() ? 1L: 0L);
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String faceUrl = entity.getFaceUrl();
        if (faceUrl != null) {
            stmt.bindString(8, faceUrl);
        }
        stmt.bindLong(9, entity.getTimMessage());
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(10, ownerId);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(11, json);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MsgPersonalEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userID = entity.getUserID();
        if (userID != null) {
            stmt.bindString(2, userID);
        }
 
        String msgID = entity.getMsgID();
        if (msgID != null) {
            stmt.bindString(3, msgID);
        }
 
        String msgType = entity.getMsgType();
        if (msgType != null) {
            stmt.bindString(4, msgType);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
        stmt.bindLong(6, entity.getIsSelf() ? 1L: 0L);
 
        String nickName = entity.getNickName();
        if (nickName != null) {
            stmt.bindString(7, nickName);
        }
 
        String faceUrl = entity.getFaceUrl();
        if (faceUrl != null) {
            stmt.bindString(8, faceUrl);
        }
        stmt.bindLong(9, entity.getTimMessage());
 
        String ownerId = entity.getOwnerId();
        if (ownerId != null) {
            stmt.bindString(10, ownerId);
        }
 
        String json = entity.getJson();
        if (json != null) {
            stmt.bindString(11, json);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MsgPersonalEntity readEntity(Cursor cursor, int offset) {
        MsgPersonalEntity entity = new MsgPersonalEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userID
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // msgID
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // msgType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // text
            cursor.getShort(offset + 5) != 0, // isSelf
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // nickName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // faceUrl
            cursor.getLong(offset + 8), // timMessage
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // ownerId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // json
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MsgPersonalEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserID(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMsgID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMsgType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setIsSelf(cursor.getShort(offset + 5) != 0);
        entity.setNickName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setFaceUrl(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTimMessage(cursor.getLong(offset + 8));
        entity.setOwnerId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setJson(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MsgPersonalEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MsgPersonalEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MsgPersonalEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
