package com.lonch.client.databases;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.lonch.client.database.bean.NetLinkEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "lonch_net_entity".
*/
public class NetLinkEntityDao extends AbstractDao<NetLinkEntity, String> {

    public static final String TABLENAME = "lonch_net_entity";

    /**
     * Properties of entity NetLinkEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property LinkId = new Property(1, String.class, "linkId", false, "LINK_ID");
        public final static Property ApiId = new Property(2, String.class, "apiId", false, "API_ID");
        public final static Property ParamValue = new Property(3, int.class, "paramValue", false, "PARAM_VALUE");
        public final static Property ResposeTime = new Property(4, int.class, "resposeTime", false, "RESPOSE_TIME");
        public final static Property TranferTime = new Property(5, int.class, "tranferTime", false, "TRANFER_TIME");
        public final static Property NetType = new Property(6, int.class, "netType", false, "NET_TYPE");
        public final static Property LossRate = new Property(7, double.class, "lossRate", false, "LOSS_RATE");
        public final static Property ReportTime = new Property(8, String.class, "reportTime", false, "REPORT_TIME");
        public final static Property Type = new Property(9, int.class, "type", false, "TYPE");
        public final static Property Ip = new Property(10, String.class, "ip", false, "IP");
        public final static Property Time = new Property(11, Long.class, "time", false, "TIME");
    }


    public NetLinkEntityDao(DaoConfig config) {
        super(config);
    }
    
    public NetLinkEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"lonch_net_entity\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"LINK_ID\" TEXT," + // 1: linkId
                "\"API_ID\" TEXT," + // 2: apiId
                "\"PARAM_VALUE\" INTEGER NOT NULL ," + // 3: paramValue
                "\"RESPOSE_TIME\" INTEGER NOT NULL ," + // 4: resposeTime
                "\"TRANFER_TIME\" INTEGER NOT NULL ," + // 5: tranferTime
                "\"NET_TYPE\" INTEGER NOT NULL ," + // 6: netType
                "\"LOSS_RATE\" REAL NOT NULL ," + // 7: lossRate
                "\"REPORT_TIME\" TEXT," + // 8: reportTime
                "\"TYPE\" INTEGER NOT NULL ," + // 9: type
                "\"IP\" TEXT," + // 10: ip
                "\"TIME\" INTEGER);"); // 11: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"lonch_net_entity\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NetLinkEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String linkId = entity.getLinkId();
        if (linkId != null) {
            stmt.bindString(2, linkId);
        }
 
        String apiId = entity.getApiId();
        if (apiId != null) {
            stmt.bindString(3, apiId);
        }
        stmt.bindLong(4, entity.getParamValue());
        stmt.bindLong(5, entity.getResposeTime());
        stmt.bindLong(6, entity.getTranferTime());
        stmt.bindLong(7, entity.getNetType());
        stmt.bindDouble(8, entity.getLossRate());
 
        String reportTime = entity.getReportTime();
        if (reportTime != null) {
            stmt.bindString(9, reportTime);
        }
        stmt.bindLong(10, entity.getType());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(11, ip);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(12, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NetLinkEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String linkId = entity.getLinkId();
        if (linkId != null) {
            stmt.bindString(2, linkId);
        }
 
        String apiId = entity.getApiId();
        if (apiId != null) {
            stmt.bindString(3, apiId);
        }
        stmt.bindLong(4, entity.getParamValue());
        stmt.bindLong(5, entity.getResposeTime());
        stmt.bindLong(6, entity.getTranferTime());
        stmt.bindLong(7, entity.getNetType());
        stmt.bindDouble(8, entity.getLossRate());
 
        String reportTime = entity.getReportTime();
        if (reportTime != null) {
            stmt.bindString(9, reportTime);
        }
        stmt.bindLong(10, entity.getType());
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(11, ip);
        }
 
        Long time = entity.getTime();
        if (time != null) {
            stmt.bindLong(12, time);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public NetLinkEntity readEntity(Cursor cursor, int offset) {
        NetLinkEntity entity = new NetLinkEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // linkId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // apiId
            cursor.getInt(offset + 3), // paramValue
            cursor.getInt(offset + 4), // resposeTime
            cursor.getInt(offset + 5), // tranferTime
            cursor.getInt(offset + 6), // netType
            cursor.getDouble(offset + 7), // lossRate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // reportTime
            cursor.getInt(offset + 9), // type
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // ip
            cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NetLinkEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLinkId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setApiId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParamValue(cursor.getInt(offset + 3));
        entity.setResposeTime(cursor.getInt(offset + 4));
        entity.setTranferTime(cursor.getInt(offset + 5));
        entity.setNetType(cursor.getInt(offset + 6));
        entity.setLossRate(cursor.getDouble(offset + 7));
        entity.setReportTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setType(cursor.getInt(offset + 9));
        entity.setIp(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTime(cursor.isNull(offset + 11) ? null : cursor.getLong(offset + 11));
     }
    
    @Override
    protected final String updateKeyAfterInsert(NetLinkEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(NetLinkEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NetLinkEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
